# -*- coding: utf-8 -*-


import os,shutil
from .exceptions import MethodNotFound

def write_file(text, file_name: str):
    if type(text) == str:
        try:
            a = open(file_name,"w")
            a.write(text)
            a.close()
            return True
        except:
            return False
    elif type(text) == list:
        try:
            a = open(file_name,"w")
            a.writelines(text)
            a.close()
            return True
        except:
            return False

def read_file(file_name: str,mode="s"):
    try:
        a = open(file_name,"r")
        d = a.readlines()
        a.close()
        if mode == "s":
            return "".join(d)
        elif mode == "l":
            return d
        else:
            raise MethodNotFound(f"Method {mode} Not Found !")
    except:
        return False


def append_file(text: str,file_name: str):
    if type(text) == str:
        try:
            a = open(file_name,"a")
            a.write(text)
            a.close()
            return True
        except:
            return False
    elif type(text) == list:
        try:
            a = open(file_name,"a")
            a.writelines(text)
            a.close()
            return True
        except:
            return False

def create_dir(dir_name,create_parents=False):
    if create_parents:
        try:
            os.mkdirs(dir_name)
            return True
        except:
            return False
    else:
        try:
            os.mkdir(dir_name)
            return True
        except:
            return False


def rm_dir(dir_name,f=False):
    if not f:
        try:
            os.rmdir(dir_name)
            return True
        except:
            return False
    else:
        try:
            shutil.rmtree(dir_name)
            return True
        except:
            return False
