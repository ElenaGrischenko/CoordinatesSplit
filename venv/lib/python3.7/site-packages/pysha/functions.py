# -*- coding: utf-8 -*-


import time, os
from .exceptions import *

# Execute Two List Of Functions Together
def exec_funcs(iter_process_one,iter_process_two):
    for i,j in zip(iter_process_one,iter_process_two):
        i()
        j()

# Execute A Command Indside Running List Functions One By One
def exec_ic(iter_process,command,before=False,wait=0):
    if not before:
        for i in iter_process:
            i()
            eval(command)
            time.sleep(wait)
    else:
        for i in iter_process:
            eval(command)
            i()
            time.sleep(wait)

# Print A List And Run A Command Between Runs
def print_with_cmd(iter_item,command,before=False,wait=0,endl="\n"):
    command = command.replace("\"",'"""')
    command = command.replace("\'",'"""')
    if not before:
        for i in iter_item:
            print(i,end=endl)
            eval(command)
            time.sleep(wait)
    else:
        for i in iter_item:
            eval(command)
            print(i,end=endl)
            time.sleep(wait)

# Print A List One By One And Wait For All Of Them
def print_wait(iter_item,wait=0.1,endl="\n"):
    for i in iter_item:
        print(i,end=endl)
        time.sleep(wait)

# Print Two Functions TogetherOne By One
def print_two_func(iter_one,iter_two,first=True):
    for i,j in zip(iter_one,iter_two):
        if first:
            print(i,end=' ')
            print(j)
        else:
            print(j,end=' ')
            print(i)

# Runs System Commands With Output
def sco(cmd,p=True):
    dt = os.popen(cmd).read()
    if p:
        print(dt)
    return dt

# Runs System Commands
def sc(cmd):
    os.system(cmd)

# Print Handler
def printf(*args,**keys):
    if type(args[0]) == list and type(args[1]) == list:
        print_two_func(*args,**keys)
    elif type(args[0]) == list and type(args[1]) == str:
        print_with_cmd(*args,**keys)
    elif type(args[0]) == list and (type(args[1]) == int or type(args[1]) == float):
        print_wait(*args,**keys)
    else:
        raise PyshaConfused(print_string_Error)
        

# Execute Handler
def execf(*args,**keys):
    if type(args[0]) == list and type(args[1]) == list:
        exec_funcs(*args,**keys)
    elif type(args[0]) == list and type(args[1]) == str:
        exec_ic(*args,**keys)
    elif type(args[0]) == list and (type(args[1]) == int or type(args[1]) == float):
        print_wait(*args,**keys)
    else:
        raise PyshaConfused(exec_string_Error)











